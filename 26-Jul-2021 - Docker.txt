#  vim dockerfile

FROM ubuntu
MAINTAINER logiclabs
RUN apt-get update
RUN apt-get install -y git

:wq


Note:  CMD  -- will run  when container starts.
       RUN  --  will executed when image is created.


# docker build -t  myubuntu . 



Cache busting
------------------
Whenever an image is build from a dockerfile, docker reads its memory and checks which instructions were already executed. 
These steps will not be reexecuted. 
It will execute only the latest instructions. This is a time saving mechanism provided by docker. 






But, the disadvantage is, we can end up installing software packages  from a repository which is updated long time back. 


Ex:

# cd docker
# vim dockerfile

Lets just add one more instruction

FROM ubuntu
MAINTAINER logiclabs

RUN apt-get update
RUN apt-get install -y git
RUN apt-get install -y tree                 


:wq


Lets build an image
# docker build -t myubuntu  .


( Observe the output,  Step 2, 3, 4 is using cache.  Only step 5 is executed freshly )



Advantage: time saving mechanism



Disadvantage : Lets say, you are running after 4 months, We are installing tree from apt which is updated long time back. )


TO avoid this disadvanatge we use cache busting
-----------------------------------------------------
Note: cache busting is implemented using && symbol.
Which ever statement in the docker file has &&  will be re-executed. 

# vim dockerfile

FROM ubuntu
MAINTAINER logiclabs

RUN apt-get update && apt-get install -y git tree

:wq

Lets build an image
# docker build -t myubuntu .

( Observe the output, step 3  - It is not using cache )


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Working on docker registry
Registry is a location where docker images are saved.
Types of registry
1) public registry
2) private registry

public registry is hub.docker.com
Images uploaded here are available for everyone.


Usecase: Create a customized ubuntu image, by installing  tree in it.

Save this container as an image, and upload this image in docker hub.

Step 1: Create a new account in hub.docker.com

Step 2: Creating our own container
# docker run --name  c5 -it  ubuntu

Lets install tree package in this container
/# apt-get update
/#  apt-get  install tree
/# exit

Step 3: Save the above container as an image
# docker commit  c5  sunildevops77/ubuntu_img26
( sunildevops77/ubuntu_img15  -- is the image name )

Note: Image name should start with docker_id/

To see the list of images
# docker image ls  ( we can see the new image )

TO upload the image to hub.docker.com  ( docker login command is used )
-------------------------------------------
# docker login   ( provide docker_id and password )

To upload the image
# docker push  <image_name>
# docker push sunildevops77/ubuntu_img26



login to docker hub to see your image

+++++++++++++++++++++++++++++++++++++++++++++++++++



+++++++++++++++++++++++++++++++++++++++++++++++++++

Container orchestration
------------------------
This is the process of running docker containers in a distributed environment, on multiple docker host machines.
All these containers can have a single service running on them and they share the resources between eachother, even running on different host machines.

Docker swarm is the tool used for performing container orchestration


Advantages
--------------
1) Load balancing
2) scaling of containers
3) performing rolling updates
4) handling failover scenarios

 
+++++++++++++++++++++++++++++








Machine on which docker swarm is installed is called as manager.
Other machines are called as workers.


Lets create 3 machines
Name is as Manager, Worker1, Worker2

All the above machines should have docker installed in it.
Install docker using get.docker.com

( Optional step to change the  prompt )
After installing docker in the 1st machine ( Manager ),  Lets change the host name.
Host name will be available in the file hostname. We will change the hostname to manager.

# vim /etc/hostname
Manager

:wq

After changing the hostname, lets restart the machine
# init 6

+++++++++++++++++++++++++++
Similary repeat the same in worker1 and worker2

++++++++++++++++++++++++++++++++++++





Connect to Manager, install docker swarm in it.

$ sudo su -

Command to install docker swarm  in manager machine

# docker swarm init --advertise-addr  private_ip_of_manager
# docker swarm init --advertise-addr  172.31.42.135


Please read the log messages

Now, we need to add workers to manager
Copy the  docker swarm join command in the log and run in the worker1  and worker2

Open another gitbash terminal, connect to worker1

sudo su -

# docker swarm join --token SWMTKN-1-27lf3n7xxqy2u3gb61mvfybk51uqjq9hj4m5uwdd4lcgtgafth-0hmrtwzrcyqv4h7cl3euekq68 172.31.44.50:2377



Repeat for worker2

+++++++++++++++++++++++++++++
TO see the no of nodes from the manager

Manager # docker  node ls   ( we can see manager, worker1  and worker 2)

+++++++++++++++++++
